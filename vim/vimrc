"-----------------------------
" => General
"-----------------------------

set nocompatible
set encoding=utf-8

execute pathogen#infect()
filetype plugin indent on
syntax on

set ruler
set laststatus=2

set re=1
set lazyredraw

set modelines=0
set tabstop=2
set shiftwidth=2
set expandtab

set number
set numberwidth=1

set cursorline
" set cursorcolumn
set cc=80

set backspace=indent,eol,start

set foldmethod=manual
set nofoldenable
set foldlevelstart=99

"set t_ZH=^[[3m
"set t_ZR=^[[23m
"highlight Comment cterm=italic

set background=dark
colorscheme gruvbox
set t_Co=256

"-----------------------------
" => Mapping
"-----------------------------

let mapleader = "\<Space>"

inoremap jj <ESC>
nnoremap H gT
nnoremap L gt
nnoremap Q @q
vnoremap Q :norm @q<CR>

map <C-n> :NERDTreeToggle<CR>

" NERDcommenter
map <C-_> <leader>c<Space>

nnoremap <leader>b :Autoformat<CR>

nmap <leader>i :TagbarToggle<CR>

nnoremap <C-t> :FZF<CR>

map  <Leader>s <Plug>(easymotion-bd-f)
nmap <Leader>s <Plug>(easymotion-overwin-f)

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>

nmap <silent> <leader>x :SyntasticToggleMode<CR>
"-----------------------------
" => Plugins
"-----------------------------
autocmd VimEnter * NERDTree
let g:NERDTreeWinSize = 27
autocmd VimEnter * wincmd p
autocmd StdinReadPre * let s:std_in=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:gitgutter_realtime = 1

let g:table_mode_corner="|"

let test#strategy = "vimux"

let g:VimuxHeight = "25"
let g:VimuxOrientation = "h"

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_loc_list_height=3
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_ruby_checkers = ['rubocop', 'mri', 'jruby']
let g:syntastic_go_checkers = ['go', 'golint', 'govet', 'errcheck']

let g:gist_get_multiplefile = 1

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" YCM with css omni
let g:ycm_semantic_triggers = {
    \   'css': [ 're!^\s+', 're!:\s+' ],
    \   'sass': [ 're!^\s+', 're!:\s+' ],
    \   'scss': [ 're!^\s+', 're!:\s+' ],
    \ }

" GOlang config
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>e <Plug>(go-rename)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_list_type = "quickfix"

let g:go_fmt_command = "goimports"
